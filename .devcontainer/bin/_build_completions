#!/bin/bash

# keyboards ディレクトリ内で keymaps/ ディレクトリを含むキーボードディレクトリのみをリストアップする関数
list_keyboards_with_keymaps() {
    # find コマンドを使って、keymaps/ サブディレクトリを持つディレクトリを検索
    local keyboards=$(find /workspace/keyboards -type d -exec test -d '{}/keymaps' \; -print | sed 's|/workspace/keyboards/||g')

    # find の結果を改行で分割して配列に格納
    local IFS=$'\n'
    local keyboard_list=($keyboards)
    unset IFS

    # 配列から空白文字で結合された文字列を生成
    local list=""
    for item in "${keyboard_list[@]}"; do
        # ディレクトリパスから最後のスラッシュを削除
        list+="$item "
    done

    echo "$list"
}

_build_completions() {
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[COMP_CWORD - 1]}

    if [ $COMP_CWORD -eq 1 ]; then
        # 1つ目の候補を返す
        COMPREPLY=($(compgen -W "qmk vial" -- "$cur"))

    # vial
    elif [ "${COMP_WORDS[1]}" = "vial" ]; then
        COMPREPLY=($(compgen -W "$(list_keyboards_with_keymaps)" -- "$cur"))

    # qmk
    elif [ "${COMP_WORDS[1]}" = "qmk" ]; then

        local opts="-kb -km -version --versions --help "

        # if [ $COMP_CWORD -eq 2 ]; then
        #     # もし、まだ何も入力していない場合、kb:km の形式の補完をする
        #     # keyboards ディレクトリのリストを取得
        #     keyboards=$(list_keyboards_with_keymaps)

        #     # キーボードとキーマップの組み合わせの補完候補を生成
        #     keymap_opts=""
        #     for keyboard in $keyboards; do
        #         local kbd_path="/workspace/keyboards/$keyboard"
        #         if [ -d "$kbd_path/keymaps" ]; then
        #             # keymaps ディレクトリがある場合のみ処理
        #             keymap_dirs=$(find "$kbd_path/keymaps" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
        #             for keymap in $keymap_dirs; do
        #                 keymap_opts+="$keyboard:${keymap} "
        #             done
        #         fi
        #     done

        #     # 現在の入力語に対する補完候補を生成
        #     COMPREPLY=($(compgen -W "$opts $keymap_opts" -- "$cur"))
        #     return 0
        # fi

        # もし '-kb' オプションが既に入力されている場合、補完候補から '-kb' を除外する
        if [[ " ${COMP_WORDS[@]} " =~ " -kb " ]]; then
            opts=${opts//-kb /}
            opts=${opts//--versions /}
            opts=${opts//--help /}
        fi

        # もし '-km' オプションが既に入力されている場合、補完候補から '-km' を除外する
        if [[ " ${COMP_WORDS[@]} " =~ " -km " ]]; then
            opts=${opts//-km /}
            opts=${opts//--versions /}
            opts=${opts//--help /}
        fi

        # もし '-version' オプションが既に入力されている場合、補完候補から '-version' を除外する
        if [[ " ${COMP_WORDS[@]} " =~ " -version " ]]; then
            opts=${opts//-version /}
            opts=${opts//--versions /}
            opts=${opts//--help /}
        fi

        case "$prev" in
        -kb)
            COMPREPLY=($(compgen -W "$(list_keyboards_with_keymaps)" -- "$cur"))
            ;;
        -km)
            local selected_keyboard=""
            # すべてのコマンドライン引数をループ処理
            for ((i = 1; i < ${#COMP_WORDS[@]}; i++)); do
                if [[ "${COMP_WORDS[i]}" == "-kb" ]]; then
                    # '-kb' オプションの次の引数をキーボードオプションとして記録
                    if ((i + 1 < ${#COMP_WORDS[@]})); then
                        selected_keyboard="${COMP_WORDS[i + 1]}"
                        break
                    fi
                fi
            done

            # キーボードが指定されている場合はキーマップを補完
            if [[ -n "$selected_keyboard" ]]; then
                local keymaps=$(find "/workspace/keyboards/${selected_keyboard}/keymaps" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
                COMPREPLY=($(compgen -W "${keymaps}" -- "$cur"))
            fi

            ;;
        *)
            # 既に入力している値は取り除いたものを返す
            COMPREPLY=($(compgen -W "$opts" -- "$cur"))
            ;;
        esac
    fi

}

complete -F _build_completions build
